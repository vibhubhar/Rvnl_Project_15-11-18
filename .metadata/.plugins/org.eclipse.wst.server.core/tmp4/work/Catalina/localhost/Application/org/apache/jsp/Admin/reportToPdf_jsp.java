/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.86
 * Generated at: 2018-05-03 04:35:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.*;
import javax.servlet.http.*;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.itextpdf.text.Element;
import com.lowagie.text.Phrase;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Font;
import java.io.*;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.sql.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.naming.*;
import java.sql.*;
import javax.sql.*;

public final class reportToPdf_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/sessionCheck1.jspf", Long.valueOf(1524567358000L));
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
int timeout = session.getMaxInactiveInterval();
response.setHeader("Refresh", timeout + "; URL = admn_login.jsp");

      out.write("<body>\r\n");

Context initCtx = new InitialContext();
Context envCtx = (Context) initCtx.lookup("java:comp/env");
DataSource ds = (DataSource) envCtx.lookup("jdbc/MySQLDB");
Connection con = null;
Statement stmt = null;
ResultSet rs = null;
String sqlQuery = "select distinct a.Document_Number,a.Document_Name,a.Document_Type,a.Document_Status,a.Submitted_by,a.Date_of_Submission,a.Date_of_Revision,b.Document_id,c.Estimated_Time,c.TimeIn,DATEDIFF(a.Date_of_Submission, a.Date_of_Revision) as 'Duration' from xx_document_mapping as a, xx_approval_workflow as b, xx_divisions_hierarchy as c";
con = ds.getConnection();
stmt = con.createStatement();
rs = stmt.executeQuery(sqlQuery);



String document_No = (String)request.getParameter("Document_No");
String document_Name = (String)request.getParameter("Document_Name");
String document_Type = (String)request.getParameter("Document_Type");
String document_Status = (String)request.getParameter("Document_Status");
String submitted_by = (String)request.getParameter("Submitted_by");
String date_of_Submission = (String)request.getParameter("Date_of_Submission");
String date_of_Revision = (String) request.getParameter("Date_of_Revision");
String document_id = (String) request.getParameter("Document_id");
String estimated_Time = (String) request.getParameter("Estimated_Time");
String timeIn = (String) request.getParameter("TimeIn");
String duration = (String) request.getParameter("duration");


response.setContentType("report/pdf");
Document document = new Document();
//document.addTitle("Pdf Report" +startDate1+ "to" +endDate1);

try{
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
PdfWriter.getInstance(document, response.getOutputStream());
document.open();
PdfPTable table1 = new PdfPTable(1);
table1.setHorizontalAlignment(Element.ALIGN_CENTER);
table1.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
table1.setWidthPercentage(80);
document.add(table1);

int i=0;
while(rs.next()){
	document.add(new Phrase("\n\n"));
	
PdfPTable table = new PdfPTable(3);
table.setHorizontalAlignment(Element.ALIGN_CENTER);
table.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
table.setWidthPercentage(80);
table.addCell("Document_No");
table.addCell(":");
table.addCell(rs.getString(1));

//table.addCell("");
//table.addCell("");
//table.addCell("");

table.addCell("Document_Name");
table.addCell(":");
table.addCell(rs.getString(2));

table.addCell("Document_Type");
table.addCell(":");
table.addCell(rs.getString(3));

table.addCell("Document_Status");
table.addCell(":");
table.addCell(rs.getString(4));

table.addCell("Submitted_by");
table.addCell(":");
table.addCell(rs.getString(5));

table.addCell("Date_of_Submission");
table.addCell(":");
table.addCell(rs.getString(6));

table.addCell("Date_of_Revision");
table.addCell(":");
table.addCell(rs.getString(7));

table.addCell("Document_id");
table.addCell(":");
table.addCell(rs.getString(8));

table.addCell("Estimated_Time");
table.addCell(":");
table.addCell(rs.getString(9));

table.addCell("TimeIn");
table.addCell(":");
table.addCell(rs.getString(10));

table.addCell("duration");
table.addCell(":");
table.addCell(rs.getString(11));

document.add(table);
//document.newPage();
i++;
}


document.close();
//document.flush();
document.close();
}catch(Exception e){
e.printStackTrace();
} finally {
    try { con.close(); } catch (Exception e) { /* ignored */ }
}

      out.write("</body>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
